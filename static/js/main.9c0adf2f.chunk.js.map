{"version":3,"sources":["sketch.js","frames.js","work.js","index.js","FreeSansBold.ttf"],"names":["Seed","sketch","Agent","this","vector","createVector","random","cube","vectorOld","copy","stepSize","isOutside","angle","positions","gaps","prototype","update","strokeWidth","strokeWeight","x","cos","y","sin","z","isGap","set","push","length","shift","beginShape","i","endShape","vertex","updateNoise","noiseScale","noiseStrength","noise","frameCount","font","textImg","preload","loadFont","Font","setupText","createGraphics","pixelDensity","background","textFont","textSize","text","fontSize","loadPixels","agents","windowResize","resizeCanvas","windowWidth","windowHeight","setup","Math","max","document","documentElement","clientWidth","window","innerWidth","createCanvas","WEBGL","rotateY","noStroke","draw","noFill","stroke","box","translate","index","floor","width","pixels","fill","Frames","props","images","Object","keys","react_default","a","createElement","className","alt","src","one","two","three","four","Work","file","header","sub_header","tags","href","visit","target","description","src_frames","data","results","p5","ReactDOM","render","portfolio","map","d","work","key","getElementById","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.9c0adf2f.chunk.js","sourcesContent":["// import p5 from 'p5';\nimport 'p5/lib/addons/p5.dom';\nimport Font from './FreeSansBold.ttf'\n// The seed that will spawn our p5 sketch.\n\n// ------------------------------------------------- //\n\nconst Seed = (sketch) => {\n\n  // ------------------------------------------------- //\n\n  const Agent = function() {\n    this.vector = sketch.createVector(sketch.random(cube), sketch.random(cube), sketch.random(cube));\n    this.vectorOld = this.vector.copy();\n    this.stepSize = sketch.random(1, 5);\n    this.isOutside = false;\n    this.angle = 0;\n    this.positions = [];\n    this.gaps = [];\n  }\n\n  Agent.prototype.update = function(strokeWidth) {\n    sketch.strokeWeight(strokeWidth * this.stepSize);\n\n    this.vector.x += sketch.cos(this.angle) * this.stepSize;\n    this.vector.y += sketch.sin(this.angle) * this.stepSize;\n    this.vector.z += sketch.cos(this.angle) * this.stepSize;\n    //this.vector.z = 0;\n    this.isOutside = this.vector.x < 0 || this.vector.x > cube || this.vector.y < 0 || this.vector.y > cube || this.vector.z < 0 || this.vector.z > cube/5;\n\n    var isGap = false;\n\n    if (this.isOutside) {\n      this.vector.set(sketch.random(cube), sketch.random(cube), sketch.random(cube/5));\n      //this.vector.set(random(cube), random(cube));\n      isGap = true;\n    }\n    this.positions.push(this.vector.copy());\n    this.gaps.push(isGap);\n\n    if (this.positions.length > 10) {\n      this.positions.shift();\n      this.gaps.shift();\n    }\n\n    sketch.beginShape();\n    for (var i = 0; i < this.positions.length; i++) {\n      if (this.gaps[i]) {\n        sketch.endShape();\n        sketch.beginShape();\n      }\n      sketch.vertex(this.positions[i].x, this.positions[i].y, this.positions[i].z);\n    }\n    sketch.endShape();\n\n    this.isOutside = false;\n  }\n\n  Agent.prototype.updateNoise = function(noiseScale, noiseStrength, strokeWidth) {\n    this.angle = sketch.noise(this.vector.x / noiseScale + sketch.frameCount/100, this.vector.y / noiseScale) * noiseStrength;\n    this.update(strokeWidth);\n  }\n\n  // ------------------------------------------------- //\n\n  let textTyped = \"evan\";\n\n  let font;\n  let fontSize = 200;\n  let textImg;\n\n  let pointDensity = 10;\n\n  let angle = 0.5;\n  let cube = 500;\n  let step = 0.001;\n  let capPos = .10;\n  let capNeg = 0;\n\n  // Load in our type\n  sketch.preload = () => font = sketch.loadFont(Font);\n  // Pre-loading graphic outside our work\n  sketch.setupText = () => {\n    // create an offscreen graphics object to draw the text into\n    textImg = sketch.createGraphics(cube, cube);\n    textImg.pixelDensity(1);\n    textImg.background(255);\n    textImg.textFont(font);\n    textImg.textSize(fontSize);\n    textImg.text(textTyped, 20, fontSize + 120);\n    textImg.loadPixels();\n  }\n  // ------------------------------------------------- //\n  // Noise 'agents' parametres\n  let agents = [];\n  let agentCount = 500;\n  let noiseScale = 300;\n  let noiseStrength = 10;\n  let overlayAlpha = 10;\n  let agentAlpha = 255;\n  let strokeWidth = 0.3;\n  let drawMode = 1;\n\n  sketch.windowResize = () => {\n    sketch.resizeCanvas(sketch.windowWidth, sketch.windowHeight);\n  }\n\n  sketch.setup = () => {\n    const w = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);\n    sketch.createCanvas(sketch.windowWidth, sketch.windowHeight, sketch.WEBGL);\n    sketch.setupText();\n    for(let i = 0; i < agentCount; i++) {\n      agents[i] = new Agent();\n    }\n    sketch.rotateY(10);\n    sketch.noStroke();\n  }\n\n  sketch.draw = () => {\n    sketch.background(0);\n\n    // if (angle < capPos) {\n    //   step += 0.001;\n    // } else if (angle > capNeg) {\n    //   step -= 0.001;\n    // }\n    angle = sketch.sin(sketch.frameCount / 10) * .4;\n\n    sketch.rotateY(angle);\n    angle += step;\n\n    sketch.noFill();\n    sketch.stroke(255);\n    sketch.box(cube, cube, cube/5);\n\n    sketch.translate(-cube/2, -cube/2);\n\n    for (let i = 0; i < agentCount; i++) {\n      // Draw agent + apply noise movement\n      // agents[i].updateNoise(noiseScale, noiseStrength, strokeWidth);\n      // Find pos of every agent??????\n      // console.log(agents[i].vector.x);\n      // Loop through text graphic + check to see if overlap?????\n      // Calculate the index for the pixels array from x and y\n      // Index? pos of pixel? matches vector??\n      let index = sketch.floor(sketch.floor(agents[i].vector.x) + sketch.floor(agents[i].vector.y) * textImg.width) * 4;\n      // console.log(index);\n      let red = textImg.pixels[index];\n      // console.log(agents[i].vector.x + \" \" + agents[i].vector.y);\n      if (red < 100) {\n        sketch.noStroke();\n        sketch.fill(255);\n        //ellipse(agents[i].vector.x, agents[i].vector.y, 5, 5);\n        agents[i].updateNoise(10, 50, strokeWidth);\n      } else {\n        sketch.noStroke();\n        sketch.fill(255,0,0);\n        agents[i].updateNoise(noiseScale, noiseStrength, strokeWidth);\n      }\n    }\n  }\n\n}\n\nexport default Seed;\n","import React from 'react';\r\n\r\n// Writing functions, no state needed.\r\nconst Frames = (props) => {\r\n  const images = Object.keys(props.images);\r\n  if (images.length === 1) {\r\n    return (\r\n      <div>\r\n        <section className=\"row\">\r\n          <img className=\"col-12\" alt=\"\" src={props.images.one}></img>\r\n        </section>\r\n      </div>\r\n    );\r\n  } else if (images.length === 2) {\r\n    return (\r\n      <div>\r\n        <section className=\"row\">\r\n          <img className=\"col-12\" alt=\"\" src={props.images.one}></img>\r\n        </section>\r\n        <section className=\"row\">\r\n          <img className=\"col-12\" alt=\"\" src={props.images.two}></img>\r\n        </section>\r\n      </div>\r\n    );\r\n  } else if (images.length === 3) {\r\n    return (\r\n      <div>\r\n        <section className=\"row\">\r\n          <img className=\"col-12\" alt=\"\" src={props.images.one}></img>\r\n        </section>\r\n        <section className=\"row\">\r\n          <img className=\"col-6\" alt=\"\" src={props.images.two}></img>\r\n          <img className=\"col-6\" alt=\"\" src={props.images.three}></img>\r\n        </section>\r\n      </div>\r\n    );\r\n  } else if (images.length === 4){\r\n    return (\r\n      <div>\r\n        <section className=\"row\">\r\n          <img className=\"col-6\" alt=\"\" src={props.images.one}></img>\r\n          <img className=\"col-6\" alt=\"\" src={props.images.two}></img>\r\n        </section>\r\n        <section className=\"row\">\r\n          <img className=\"col-6\" alt=\"\" src={props.images.three}></img>\r\n          <img className=\"col-6\" alt=\"\" src={props.images.four}></img>\r\n        </section>\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <div></div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Frames;\r\n","import React from 'react';\nimport Frames from './frames'\n\n// Writing functions, no state needed.\nconst Work = (props) => {\n  return (\n    <div className=\"showcase-sections\">\n      <section className=\"row\">\n        <aside className=\"col-12\">{props.file}</aside>\n      </section>\n      <section className=\"row\">\n        <header className=\"col-12 showcase-titles\">{props.header}<span>{props.sub_header}</span></header>\n      </section>\n      <section className=\"row\">\n        <article className=\"col-6\">\n          <p>{props.tags}</p>\n          <a className=\"visit\" href={props.visit} target=\"new\">Visit Project >></a>\n        </article>\n        <article className=\"col-6\">\n          <p>{props.description}</p>\n        </article>\n      </section>\n      <Frames images={props.images}/>\n    </div>\n  );\n}\n\nexport default Work;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport p5 from 'p5';\nimport Seed from './sketch'\nimport Work from './work';\nimport Nav from './nav';\nimport Data from './data';\nconst data = Data.results;\n\nconst List = () => {\n  const portfolio = data.map(d =>\n    <Work\n      key={d.file}\n      file={d.file}\n      header={d.header}\n      sub_header={d.sub_header}\n      tags={d.tags}\n      description={d.description}\n      visit={d.visit}\n      images={d.images}\n    />\n  );\n  return (\n    <div>{portfolio}</div>\n  );\n}\n\nnew p5(Seed,'sketch'); // p5 components are weird, can't get them to work.\n\n// ReactDOM.render(<Nav/>, document.getElementById('nav'));\n\nReactDOM.render(<List/>, document.getElementById('root'));\n","module.exports = __webpack_public_path__ + \"static/media/FreeSansBold.f8dbf247.ttf\";"],"sourceRoot":""}